# vim: set ft=yaml expandtab shiftwidth=2 tabstop=2 smartindent :
---
kind: ConfigMap
apiVersion: v1
metadata:
  creationTimestamp: null
  name: env-config
data:
  TARGET_INTERFACE: "eth0"
  ETCD_HOSTNAME: "etcd-client"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: asterisk
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: asterisk
      labels:
        app: asterisk
    spec:
      containers:
        - name: asterisk
          image: dougbtv/asterisk14
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /etc/asterisk/
              name: config
          envFrom:
          - configMapRef:
             name: env-config
          command:
            - "/bin/bash"
            - "-c"
            - "cat /etc/asterisk/entrypoint.sh | /bin/bash"
        - name: captagent
          image: dougbtv/homer-captagent
          imagePullPolicy: IfNotPresent
          args:
            - "--capturehost"
            - "kamailio"
      # nodeSelector:
      #   voiptype: tandem
      volumes:
        - name: config
          configMap:
            name: asterisk-vanilla-config
            items:
              - key: http.conf
                path: http.conf
              - key: ari.conf
                path: ari.conf
              - key: rtp.conf
                path: rtp.conf
              - key: extensions.conf
                path: extensions.conf
              - key: pjsip.conf
                path: pjsip.conf
              - key: cdr.conf
                path: cdr.conf
              - key: modules.conf
                path: modules.conf
              - key: asterisk.conf
                path: asterisk.conf
              - key: hep.conf
                path: hep.conf
              - key: entrypoint.sh
                path: entrypoint.sh
              # - ./docker/asterisk_entrypoint.sh:/entrypoint.sh
              # - ./docker/sounds:/var/lib/asterisk/sounds/en/
---
kind: ConfigMap
apiVersion: v1
metadata:
  creationTimestamp: null
  name: controller-config
data:
  config.json: |
    {
      "SERVER_PORT": "8001",
      "CONFIG_NAME": "kubernetes",
      "etcd_host": "etcd-client",
      "etcd_port": "2379",
      "sourcery_port": "8088",
      "temp_path": "/tmp",
      "log_stdout": false,
      "pretty_log": true
    }
---
apiVersion: v1
kind: Pod
metadata:
  name: controller
  labels:
    app: controller
spec:
  containers:
    - name: controller
      image: dougbtv/vnf-asterisk-controller
      imagePullPolicy: IfNotPresent
      command:
        - nodemon
        - vnf-asterisk-controller.js
      volumeMounts:
        - mountPath: /vac/includes
          name: config
  volumes:
    - name: config
      configMap:
        name: controller-config
        items:
          - key: config.json
            path: config.json
  # nodeSelector:
  #   voiptype: tandem
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    service: controller
  name: controller
spec:
  # clusterIP: None
  ports:
  - name: "8001"
    port: 8001
    protocol: TCP
    targetPort: 8001
  selector:
    app: controller
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Pod
metadata:
  name: vnfui
  labels:
    app: vnfui
spec:
  containers:
    - name: vnfui
      image: dougbtv/vnf-asterisk-nginx
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - mountPath: /vac/www/dist/config
          name: config
  volumes:
    - name: config
      configMap:
        name: controller-ui-config
        items:
          - key: config.js
            path: config.js

  # nodeSelector:
  #   voiptype: tandem
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    service: vnfui
  name: vnfui
spec:
  # clusterIP: None
  ports:
  - name: "80"
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: vnfui
status:
  loadBalancer: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: nginx-config
data:
  nginx.conf: | 
    server {
      listen       80;
      server_name  localhost;
      location / {
          root   /vac/www/dist;
          index  index.html index.htm;
      }
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   /usr/share/nginx/html;
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: controller-ui-config
data:
  config.js: |
    var env = {
      environment_name: "kubernetes_config",
      api_url: 'http://' + window.location.hostname + ':8001',
    };
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: asterisk-vanilla-config
data:
  asterisk.conf: |
    [directories](!)
    astetcdir => /etc/asterisk
    astmoddir => /usr/lib64/asterisk/modules
    astvarlibdir => /var/lib/asterisk
    astdbdir => /var/lib/asterisk
    astkeydir => /var/lib/asterisk
    astdatadir => /var/lib/asterisk
    astagidir => /var/lib/asterisk/agi-bin
    astspooldir => /var/spool/asterisk
    astrundir => /var/run/asterisk
    astlogdir => /var/log/asterisk
    astsbindir => /usr/sbin

    [options]
    documentation_language = en_US

    ; Changing the following lines may compromise your security.
    ;[files]
    ;astctlpermissions = 0660
    ;astctlowner = root
    ;astctlgroup = apache
    ;astctl = asterisk.ctl

  hep.conf: |
    ;
    ; res_hep Module configuration for Asterisk
    ;

    ; All settings are currently set in the general section.
    [general]
    enabled = yes                      ; Enable/disable forwarding of packets to a
                                       ; HEP server. Default is "yes".
    capture_address = kamailio:9061    ; The address of the HEP capture server.
    ; capture_password = foo             ; If specified, the authorization passsword
                                       ; for the HEP server. If not specified, no
                                       ; authorization password will be sent.
    capture_id = HEP_CAPTURE_ID        ; A unique integer identifier for this
                                       ; server. This ID will be embedded sent
                                       ; with each packet from this server.
    uuid_type = call-id                ; Specify the preferred source for the Homer
                                       ; correlation UUID. Valid options are:
                                       ; - 'call-id' for the PJSIP SIP Call-ID
                                       ; - 'channel' for the Asterisk channel name

  modules.conf: |
    ;
    ; Asterisk configuration file
    ;
    ; Module Loader configuration file
    ;

    [modules]
    autoload=yes
    noload => res_parking.so
    noload => func_periodic_hook.so
    noload => pbx_ael.so
    noload => chan_sip.so
    noload => chan_skinny.so
    noload => app_voicemail.so
    noload => res_phoneprov.so
    noload => res_pjsip_phoneprov_provider.so
    noload => res_musiconhold.so
  pjsip.conf: |
    ; Basic UDP transport
    ;
    [transport-udp]
    type=transport
    protocol=udp    ;udp,tcp,tls,ws,wss
    bind=0.0.0.0
  cdr.conf: |
    [general]

    [csv]
    usegmtime=yes    ; log date/time in GMT.  Default is "no"
    loguniqueid=yes  ; log uniqueid.  Default is "no"
    loguserfield=yes ; log user field.  Default is "no"
    accountlogs=yes  ; create separate log file for each account code. Default is "yes"

  extensions.conf: |
    [inbound]

    exten => _X.,1,Noop(Inbound call)
    same =>      n,Answer() ; Wont' log a cdr without that, huh.
    same =>      n,MixMonitor(test.ulaw)
    same =>      n,stasis(inbound)
    same =>      n,Hangup()

  rtp.conf: |
    [general]
    rtpstart=10000
    rtpend=10010

  ari.conf: |
    [general]
    enabled = yes       ; When set to no, ARI support is disabled.

    [asterisk]
    type = user
    password = asterisk

  http.conf: |
    ;
    ; Asterisk Builtin mini-HTTP server
    ;
    ;
    ; Note about Asterisk documentation:
    ;   If Asterisk was installed from a tarball, then the HTML documentation should
    ;   be installed in the static-http/docs directory which is
    ;   (/var/lib/asterisk/static-http/docs) on linux by default.  If the Asterisk
    ;   HTTP server is enabled in this file by setting the "enabled", "bindaddr",
    ;   and "bindport" options, then you should be able to view the documentation
    ;   remotely by browsing to:
    ;       http://<server_ip>:<bindport>/static/docs/index.html
    ;
    [general]
    ;
    ; The name of the server, advertised in both the Server field in HTTP
    ; response message headers, as well as the <address /> element in certain HTTP
    ; response message bodies. If not furnished here, "Asterisk/{version}" will be
    ; used as a default value for the Server header field and the <address />
    ; element. Setting this property to a blank value will result in the omission
    ; of the Server header field from HTTP response message headers and the
    ; <address /> element from HTTP response message bodies.
    ;
    servername=Asterisk
    ;
    ; Whether HTTP/HTTPS interface is enabled or not.  Default is no.
    ; This also affects manager/rawman/mxml access (see manager.conf)
    ;
    enabled=yes
    ;
    ; Address to bind to, both for HTTP and HTTPS. You MUST specify
    ; a bindaddr in order for the HTTP server to run. There is no
    ; default value.
    ;
    bindaddr=0.0.0.0
  extensions.ael: |
    [fakeout]

  entrypoint.sh: |
    #!/bin/bash
    set -x

    # Check for target interface
    echo "TARGET_INTERFACE: $TARGET_INTERFACE"
    if [ -z "$TARGET_INTERFACE" ]; then
      echo "You must specify the TARGET_INTERFACE environment variable."
      exit 1
    fi

    # Check for etcd hostname
    if [ -z "$ETCD_HOSTNAME" ]; then
      echo "You must specify the ETCD_HOSTNAME environment variable."
      exit 1
    fi

    # Check to see if etcd is alive.
    # Wait for etcd in a loop for 5 retries
    wait_seconds="3"
    retries="0"
    while [ $retries -lt 5 ]; do

      retries=$[$retries+1]
      
      curl -s -L --connect-timeout $wait_seconds http://$ETCD_HOSTNAME:2379/version
      status=$?

      # Check if it errored out.
      if [ $status -ne 0 ]; then
        echo "WARNING: Etcd not responding (exit: $status / retries: $retries)"
      else
        break
      fi
    
    done

    if [ $status -ne 0 ]; then
      echo "ERROR: Connection to etcd failed after some retries."
      exit 1
    else
      echo "Connected to ETCD @ $ETCD_HOSTNAME"
    fi


    # Get the IP address for the interface
    ip_address=$(ip a | grep -Pi -A3 "^\d.+$TARGET_INTERFACE" | grep "inet " | awk '{print $2}' | perl -p -e 's|^(.+)/.+$|$1|')

    # Generate a UUID name for this box.
    UUID=$(cat /proc/sys/kernel/random/uuid)

    # Now announce that IP address to etcd
    echo "Announcing IP location to etcd: $ip_address"
    curl -s -L -X PUT http://$ETCD_HOSTNAME:2379/v2/keys/asterisk/$UUID/ip -d value="$ip_address"

    if [ -z "$ADVERTISE_NICKNAME" ]; then
      # Generate one.
      ADVERTISE_NICKNAME=$(curl --connect-timeout 3 -s https://frightanic.com/goodies_content/docker-names.php)
    fi

    if [ ! -z "$ADVERTISE_NICKNAME" ]; then
      echo "Announcing nickname to etcd: $ADVERTISE_NICKNAME"
      curl -s -L -X PUT http://$ETCD_HOSTNAME:2379/v2/keys/asterisk/$UUID/nickname -d value="$ADVERTISE_NICKNAME"
    fi

    # Update hep.conf 
    random_hep_id=$RANDOM
    sed -i -e "s/HEP_CAPTURE_ID/$random_hep_id/" /etc/asterisk/hep.conf
    echo "Random HEP ID: $random_hep_id"

    asterisk -f

# ------------------------------------------------------------------------------
# -                                                                       etcd -
# ------------------------------------------------------------------------------

---
apiVersion: v1
kind: Service
metadata:
  name: etcd-client
spec:
  ports:
  - name: etcd-client-port
    port: 2379
    protocol: TCP
    targetPort: 2379
  selector:
    app: etcd

---

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: etcd
    etcd_node: etcd0
  name: etcd0
spec:
  containers:
  - command:
    - /usr/local/bin/etcd
    - --name
    - etcd0
    - --initial-advertise-peer-urls
    - http://etcd0:2380
    - --listen-peer-urls
    - http://0.0.0.0:2380
    - --listen-client-urls
    - http://0.0.0.0:2379
    - --advertise-client-urls
    - http://etcd0:2379
    - --initial-cluster
    - etcd0=http://etcd0:2380,etcd1=http://etcd1:2380,etcd2=http://etcd2:2380
    - --initial-cluster-state
    - new
    image: quay.io/coreos/etcd:latest
    name: etcd0
    ports:
    - containerPort: 2379
      name: client
      protocol: TCP
    - containerPort: 2380
      name: server
      protocol: TCP
  restartPolicy: Never

---

apiVersion: v1
kind: Service
metadata:
  labels:
    etcd_node: etcd0
  name: etcd0
spec:
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  - name: server
    port: 2380
    protocol: TCP
    targetPort: 2380
  selector:
    etcd_node: etcd0

---

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: etcd
    etcd_node: etcd1
  name: etcd1
spec:
  containers:
  - command:
    - /usr/local/bin/etcd
    - --name
    - etcd1
    - --initial-advertise-peer-urls
    - http://etcd1:2380
    - --listen-peer-urls
    - http://0.0.0.0:2380
    - --listen-client-urls
    - http://0.0.0.0:2379
    - --advertise-client-urls
    - http://etcd1:2379
    - --initial-cluster
    - etcd0=http://etcd0:2380,etcd1=http://etcd1:2380,etcd2=http://etcd2:2380
    - --initial-cluster-state
    - new
    image: quay.io/coreos/etcd:latest
    name: etcd1
    ports:
    - containerPort: 2379
      name: client
      protocol: TCP
    - containerPort: 2380
      name: server
      protocol: TCP
  restartPolicy: Never

---

apiVersion: v1
kind: Service
metadata:
  labels:
    etcd_node: etcd1
  name: etcd1
spec:
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  - name: server
    port: 2380
    protocol: TCP
    targetPort: 2380
  selector:
    etcd_node: etcd1

---

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: etcd
    etcd_node: etcd2
  name: etcd2
spec:
  containers:
  - command:
    - /usr/local/bin/etcd
    - --name
    - etcd2
    - --initial-advertise-peer-urls
    - http://etcd2:2380
    - --listen-peer-urls
    - http://0.0.0.0:2380
    - --listen-client-urls
    - http://0.0.0.0:2379
    - --advertise-client-urls
    - http://etcd2:2379
    - --initial-cluster
    - etcd0=http://etcd0:2380,etcd1=http://etcd1:2380,etcd2=http://etcd2:2380
    - --initial-cluster-state
    - new
    image: quay.io/coreos/etcd:latest
    name: etcd2
    ports:
    - containerPort: 2379
      name: client
      protocol: TCP
    - containerPort: 2380
      name: server
      protocol: TCP
  restartPolicy: Never

---

apiVersion: v1
kind: Service
metadata:
  labels:
    etcd_node: etcd2
  name: etcd2
spec:
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  - name: server
    port: 2380
    protocol: TCP
    targetPort: 2380
  selector:
    etcd_node: etcd2
